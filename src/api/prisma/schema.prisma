// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Room {
  room_number     String  @id
  occupied        Boolean @default(false)
  cleaning_status Status  @default(CLEAN)
  service         Boolean @default(false)
  out_of_order    Boolean @default(false)
  clean_type      Type    @default(DAILY)

  Reservation      Reservation[]
  groupRoom        GroopRooms?
  chambermaid_note Note[]
  RoomDescription  RoomDescription?
  MenuOrder        MenuOrder[]
}

model Reservation {
  reservation_id Int      @id @default(autoincrement())
  room_number    String
  client_id      Int
  arrival        DateTime @default(now())
  departure      DateTime @default(now())
  room           Room     @relation(fields: [room_number], references: [room_number])
  client         Client   @relation(fields: [client_id], references: [client_id])
  charge         Charge[]
}

model Charge {
  reservation_id Int
  timestamp      DateTime
  description    String
  amount         Float
  type           ChargeType
  reservation    Reservation @relation(fields: [reservation_id], references: [reservation_id])

  @@id([reservation_id, timestamp])
}

model Note {
  note_id     Int      @id @default(autoincrement())
  completed   Boolean
  content     String
  created     DateTime @default(now())
  room_number String
  employee_id Int
  chambermaid Employee @relation(fields: [employee_id], references: [employee_id])
  room        Room     @relation(fields: [room_number], references: [room_number])
}

model Client {
  client_id   Int           @id @default(autoincrement())
  name        String
  cellphone   String
  email       String
  Reservation Reservation[]
}

model Employee {
  employee_id Int          @id @default(autoincrement())
  type        EmployeeType
  name        String
  username    String
  password    String

  notes        Note[]
  Group        Group?
  GroupChamber GroupChamber[]
}

model Group {
  group_id       Int @id
  housekeeper_id Int @unique

  groupRooms   GroopRooms[]
  GroupChamber GroupChamber[]
  HouseKeepers Employee       @relation(fields: [housekeeper_id], references: [employee_id])
}

model GroupChamber {
  group_id       Int
  chambermaid_id Int
  group          Group    @relation(fields: [group_id], references: [group_id])
  chambermaid    Employee @relation(fields: [chambermaid_id], references: [employee_id])

  @@id([group_id, chambermaid_id])
}

model GroopRooms {
  group_id    Int
  room_number String @unique
  group       Group  @relation(fields: [group_id], references: [group_id])
  room        Room   @relation(fields: [room_number], references: [room_number])

  @@id([group_id, room_number])
}

model ProvisionOrder {
  provision_id Int      @id @default(autoincrement())
  description  String
  employee_id  Int
  complete     Boolean
  creation     DateTime @default(now())
}

model MenuOrder {
  order_id    Int      @id @default(autoincrement())
  menu_id     Int
  room_number String
  amount      Int
  complete    Boolean
  creation    DateTime @default(now())
  room        Room     @relation(fields: [room_number], references: [room_number])
  menu        MenuItem @relation(fields: [menu_id], references: [menu_id])
}

model MenuItem {
  menu_id      Int         @id @default(autoincrement())
  name         String
  price        Float
  availability Boolean
  MenuOrder    MenuOrder[]
}

model RoomDescription {
  room_number String @id
  roomType    String
  roomClass   String
  floor       String
  room        Room   @relation(fields: [room_number], references: [room_number])
}

enum ChargeType {
  CHARGE
  CREDIT
}

enum Status {
  DIRTY
  PENDING_UPLOAD
  PENDING_CHECK
  CLEAN
  INSPECTED
}

enum EventType {
  CLEAN
  DEEP_CLEAN
  INSPECT
  UPLOAD
  CANCELLED
  BLOCKED
  REINSTITUTED
}

enum Type {
  DAILY
  DEEP
}

enum EmployeeType {
  HOUSEKEEPER
  CHAIMBERMAID
  KITCHEN
  RECEPTION
}

enum OrderType {
  PROVISION
  MENU
}
